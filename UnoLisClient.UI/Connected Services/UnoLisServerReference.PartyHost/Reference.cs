//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnoLisClient.UI.UnoLisServerReference.PartyHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UnoLisServerReference.PartyHost.IPartyHostManager", CallbackContract=typeof(UnoLisClient.UI.UnoLisServerReference.PartyHost.IPartyHostManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPartyHostManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/CreateParty")]
        void CreateParty(string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/CreateParty")]
        System.Threading.Tasks.Task CreatePartyAsync(string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/StartMatch")]
        void StartMatch(int partyId, string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/StartMatch")]
        System.Threading.Tasks.Task StartMatchAsync(int partyId, string hostNickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/CancelParty")]
        void CancelParty(int partyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPartyHostManager/CancelParty")]
        System.Threading.Tasks.Task CancelPartyAsync(int partyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyHostManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/PartyCreated", ReplyAction="http://tempuri.org/IPartyHostManager/PartyCreatedResponse")]
        void PartyCreated(int partyId, string joinCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/PlayerJoined", ReplyAction="http://tempuri.org/IPartyHostManager/PlayerJoinedResponse")]
        void PlayerJoined(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/PlayerLeft", ReplyAction="http://tempuri.org/IPartyHostManager/PlayerLeftResponse")]
        void PlayerLeft(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/PlayerReadyStatusChanged", ReplyAction="http://tempuri.org/IPartyHostManager/PlayerReadyStatusChangedResponse")]
        void PlayerReadyStatusChanged(string nickname, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/AllPlayersReady", ReplyAction="http://tempuri.org/IPartyHostManager/AllPlayersReadyResponse")]
        void AllPlayersReady();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/PartyCancelled", ReplyAction="http://tempuri.org/IPartyHostManager/PartyCancelledResponse")]
        void PartyCancelled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPartyHostManager/MatchStarted", ReplyAction="http://tempuri.org/IPartyHostManager/MatchStartedResponse")]
        void MatchStarted();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPartyHostManagerChannel : UnoLisClient.UI.UnoLisServerReference.PartyHost.IPartyHostManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PartyHostManagerClient : System.ServiceModel.DuplexClientBase<UnoLisClient.UI.UnoLisServerReference.PartyHost.IPartyHostManager>, UnoLisClient.UI.UnoLisServerReference.PartyHost.IPartyHostManager {
        
        public PartyHostManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PartyHostManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PartyHostManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyHostManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PartyHostManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateParty(string hostNickname) {
            base.Channel.CreateParty(hostNickname);
        }
        
        public System.Threading.Tasks.Task CreatePartyAsync(string hostNickname) {
            return base.Channel.CreatePartyAsync(hostNickname);
        }
        
        public void StartMatch(int partyId, string hostNickname) {
            base.Channel.StartMatch(partyId, hostNickname);
        }
        
        public System.Threading.Tasks.Task StartMatchAsync(int partyId, string hostNickname) {
            return base.Channel.StartMatchAsync(partyId, hostNickname);
        }
        
        public void CancelParty(int partyId) {
            base.Channel.CancelParty(partyId);
        }
        
        public System.Threading.Tasks.Task CancelPartyAsync(int partyId) {
            return base.Channel.CancelPartyAsync(partyId);
        }
    }
}
